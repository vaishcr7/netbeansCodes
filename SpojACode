package spojacode;

import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class SpojACode {
    static class Reader {

        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader() {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public Reader(String file_name) throws IOException {
            din = new DataInputStream(new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String readLine() throws IOException {
            byte[] buf = new byte[64]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (c == '\n') {
                    break;
                }
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextInt() throws IOException {
            int ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg) {
                c = read();
            }
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (neg) {
                return -ret;
            }
            return ret;
        }

        public long nextLong() throws IOException {
            long ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg) {
                c = read();
            }
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');
            if (neg) {
                return -ret;
            }
            return ret;
        }

        public double nextDouble() throws IOException {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg) {
                c = read();
            }

            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (c == '.') {
                while ((c = read()) >= '0' && c <= '9') {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg) {
                return -ret;
            }
            return ret;
        }

        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1) {
                buffer[0] = -1;
            }
        }

        private byte read() throws IOException {
            if (bufferPointer == bytesRead) {
                fillBuffer();
            }
            return buffer[bufferPointer++];
        }

        public void close() throws IOException {
            if (din == null) {
                return;
            }
            din.close();
        }
    }
    public static void main(String[] args) {
    Reader sc=new Reader();
        try 
        {
            String t=sc.readLine();
            Map<String,Long> mp=new HashMap<>();
            while(t.charAt(0)!='0')     //any substrings starting with zero are invalid encryptions
            {
                //System.out.println("input with "+t);
                System.out.println(calcAns(t,mp));
                t=sc.readLine();
            }
        } 
        catch (IOException ex) 
        {
            
        }
    
    }
    public static long calcAns(String t,Map<String,Long> mp)
    {
        System.out.println("t= "+t);
        System.out.println("map is ");
        Set<Map.Entry<String,Long>> st=mp.entrySet();
        Iterator it=st.iterator();
        while(it.hasNext())
        {
           Entry<String,Long> entry=(Entry<String,Long>)it.next();
            System.out.println(entry.getKey()+" , "+entry.getValue());
        }
        System.out.println("");
        long z=0;
        if(!mp.containsKey(t))
        {
            if(t.length()==0)
            {
                System.out.println("returning zero");
                return 0;
            }
            char oneLetterPerm=t.charAt(t.length()-1);
            if(t.length()>=2)
            {
                String twoLetterPerm = t.substring(t.length() - 2, t.length());
                if (Integer.parseInt(twoLetterPerm) < 27 && Integer.parseInt(twoLetterPerm) > 0 && twoLetterPerm.charAt(0) != '0') {
                    if (oneLetterPerm != '0') {
                        System.out.println("case 1");
                        mp.put(t, (1 + calcAns(t.substring(0, t.length() - 2), mp) + calcAns(t.substring(0, t.length() - 1), mp)));
                    } 
                    else {
                        System.out.println("case 2");
                        mp.put(t, (1 + calcAns(t.substring(0, t.length() - 2), mp)));
                    }
                }
            }
            if(oneLetterPerm!='0')
            {
                System.out.println("case 3");
                mp.put(t,calcAns(t.substring(0,t.length()-1), mp));
            }
            else
            {
                System.out.println("case 4");
                mp.put(t,0L);
            }
        }
        System.out.println("for "+t+" the sum exists is "+mp.get(t));
        return mp.get(t);
    }
    /*
    public static int formGpsAndRetAns(String t,Map<Integer,Character> mp)
    {
        //System.out.println("inside working func");
        long numOfgps=0;
        Map<String,String> mapping=new HashMap<>();
        ArrayList<String> singleCopy=new ArrayList<>();
         ArrayList<String> tempsingleCopy=new ArrayList<>();
        //forming combinations
        for (int i = t.length()-1; i >=0; i--) 
        {
            char ch=t.charAt(i);
           //System.out.println("current character is "+ch);
            //case: if t itself is zero 
            //case: if t is not zero
            if(!singleCopy.isEmpty())
            {
                tempsingleCopy.clear();
                int it=0;
                long currSingleCopySize=singleCopy.size();
                while(it<currSingleCopySize)
                {
                    String f=singleCopy.get(it);
                    String sp[]=f.split(",");
                    if(sp[0].length()==1)// need to make it two letter string in this case
                    {
                       // System.out.println("case 1");
                        // case where a zero is present
                        if(sp[0].charAt(0)=='0')
                        {
                            //System.out.println("case 2");
                            String s=ch+sp[0];
                            if(Integer.parseInt(s)<27 && ch!='0')
                            {
                               // System.out.println("case 3");
                                StringBuilder finalString = new StringBuilder();
                                finalString.append(s).append(",");
                                for (int j = 1; j < sp.length; j++) {
                                    finalString.append(sp[j]).append(",");
                                }
                                finalString.deleteCharAt(finalString.length() - 1);
                              //  System.out.println("adding this to collection : "+finalString.toString());
                                tempsingleCopy.add(finalString.toString());
                            }
                        }
                        else
                        {
                            //double digit case 
                           String s=ch+sp[0];
                           if(Integer.parseInt(s)<27 && ch!='0')
                            {
                               //System.out.println("case 4");
                                StringBuilder finalString = new StringBuilder();
                                finalString.append(s).append(",");
                                for (int j = 1; j < sp.length; j++) {
                                    finalString.append(sp[j]).append(",");
                                }
                                finalString.deleteCharAt(finalString.length() - 1);
                               // System.out.println("adding this to collection : "+finalString.toString());
                                tempsingleCopy.add(finalString.toString());
                            }
                           //single digit case
                           s=""+ch;
                           StringBuilder finalString = new StringBuilder();
                           finalString.append(s).append(",");
                           for (int j = 0; j < sp.length; j++) {
                                finalString.append(sp[j]).append(",");                                
                            }
                           finalString.deleteCharAt(finalString.length() - 1);
                           //System.out.println("adding this to collection : "+finalString.toString());
                           tempsingleCopy.add(finalString.toString());
                        }
                    }
                    else // only add the current char at the head 
                    {                        
                     //   System.out.println("case 5");
                           //single digit case
                           String s=""+ch;
                           StringBuilder finalString = new StringBuilder();
                           finalString.append(s).append(",");
                           for (int j = 0; j < sp.length; j++) {
                                finalString.append(sp[j]).append(",");
                            }
                           finalString.deleteCharAt(finalString.length() - 1);
                           //System.out.println("adding this to collection : "+finalString.toString());
                           tempsingleCopy.add(finalString.toString());
                    }
                    it++;
                }
            }
            else
            {
               // System.out.println("case 6");
                //System.out.println("adding this to collection : "+ch);
                tempsingleCopy.add(""+ch);
            }
            Set<String> st = new HashSet<>();
           /* System.out.println("tempsinglecopy= ");
            for (int iz = 0; iz < tempsingleCopy.size(); iz++) {
                System.out.println(tempsingleCopy.get(iz));
            }
            System.out.println("");
            st.addAll(tempsingleCopy);
            singleCopy.clear();
            singleCopy.addAll(st);
        }
        // some combinations might contain single zeroes eg) 1,14,0,2; remove such combs
        int it=0;
        while(it<singleCopy.size())
        {
            String s=singleCopy.get(it);
            String []sp=s.split(",");
            for (int i = 0; i < sp.length; i++) {
               // System.out.println("checking single zero in "+sp[i]);
                if(sp[i].equals("0") || sp[i].equals("00"))
                    singleCopy.remove(s);
            }
            it++;
        }
        return singleCopy.size();
    }*/
    
}
