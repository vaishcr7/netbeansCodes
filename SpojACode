package spojacode;

import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
 class SpojACode {
   static class Reader {

        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader() {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public Reader(String file_name) throws IOException {
            din = new DataInputStream(new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String readLine() throws IOException {
            byte[] buf = new byte[64]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (c == '\n') {
                    break;
                }
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextInt() throws IOException {
            int ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg) {
                c = read();
            }
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (neg) {
                return -ret;
            }
            return ret;
        }

        public long nextLong() throws IOException {
            long ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg) {
                c = read();
            }
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');
            if (neg) {
                return -ret;
            }
            return ret;
        }

        public double nextDouble() throws IOException {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg) {
                c = read();
            }

            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (c == '.') {
                while ((c = read()) >= '0' && c <= '9') {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg) {
                return -ret;
            }
            return ret;
        }

        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1) {
                buffer[0] = -1;
            }
        }

        private byte read() throws IOException {
            if (bufferPointer == bytesRead) {
                fillBuffer();
            }
            return buffer[bufferPointer++];
        }

        public void close() throws IOException {
            if (din == null) {
                return;
            }
            din.close();
        }
    }
 public static Map<String,Integer> mp;
    public static void main(String[] args) {
    Reader sc=new Reader();
            String t;
       try {
           t = sc.readLine();
            mp=new HashMap<>();
            while(t.charAt(0)!='0')     //any substrings starting with zero are invalid encryptions
            {
                //System.out.println("input with "+t);
                System.out.println(calcAns(t));
                t=sc.readLine();
            }
       }
       catch(Exception e)
       {
       }
    }
    public static int calcAns(String t)
    {
        //System.out.println("t is "+t);
        int z=0;
        if(!mp.containsKey(t))
        {
            if(t.length()==0)
            {
                //System.out.println("returning zero");
                return 0;
            }
            char oneLetterPerm=t.charAt(t.length()-1);
            boolean flag=false;
            if(t.length()>=2)
            {
                String twoLetterPerm = t.substring(t.length() - 2, t.length());
                //System.out.println("two letter param = "+twoLetterPerm+" and one letter param= "+oneLetterPerm);
                if (Integer.parseInt(twoLetterPerm) < 27 && Integer.parseInt(twoLetterPerm) > 0 && twoLetterPerm.charAt(0) != '0') //last condition takes care of '03' type cases
                {
                    if (oneLetterPerm != '0') {
                        //System.out.println("case 1");
                        flag=true;
                       int a=calcAns(t.substring(0, t.length() - 2));
                       int b= calcAns(t.substring(0, t.length() - 1));
                       //System.out.println("putting value in map 1 for "+t+" : a= "+a+" and b= "+b);
                       if(Integer.parseInt(twoLetterPerm)>0 && Integer.parseInt(twoLetterPerm)<27)
                           a+=1;
                       mp.put(t, (a+b));//how to handle case where for eg) 25->2,5;25->,25 should add 1 and 1 but ignores ,25 case
                    } 
                   else {       // not taking into account the double zero case it will become an invalid encryption then.
                        //System.out.println("case 2");
                        if(!mp.containsKey(t) &&  (Integer.parseInt(twoLetterPerm)>0 && Integer.parseInt(twoLetterPerm)<27))//to include case where t='10'
                            mp.put(t,1+(calcAns(t.substring(0, t.length() - 2))));
                        else
                            mp.put(t, (calcAns(t.substring(0, t.length() - 2))));
                        //System.out.println("putting value in map 2 for "+t+" which is "+mp.get(t));
                    }
                }
            }
            if(oneLetterPerm!='0' && !flag)
            {
                //System.out.println("case 3");
                int h=calcAns(t.substring(0,t.length()-1));
                if(h==0)
                {
                    //System.out.println("case 3b");
                    ////System.out.println("putting value in map 3b for "+t);
                    if(t.length()==1)
                        mp.put(t,1);
                    else
                    {
                        mp.put(t,0);
                    }
                }
                else
                {
                    //System.out.println("putting value in map 3 for "+t);
                    mp.put(t,h);
                }
            }
            if(oneLetterPerm=='0' && !mp.containsKey(t))
            {
                //System.out.println("case 4");
                //System.out.println("putting value in map 4 for "+t);
                mp.put(t,0);
            }
        }
        //System.out.println("for "+t+" the sum exists is "+mp.get(t));
        if(mp.get(t)!=null)
            return mp.get(t);
        else
        {
            //System.out.println("map doesn't contain key for string "+t);
            return 0;
        }
    }
}
