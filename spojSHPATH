package dijsktraalgo;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Scanner;

/**
 *
 * @author vibhor.vaish
 */
public class DijsktraAlgo {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int s=sc.nextInt();
        while(s-->0)
        {
            int n=sc.nextInt();
            graph g=new graph();
            Map<Integer,String> names=new HashMap<>();
            Map<String,Integer> nam=new HashMap<>();
            Map<Integer,String> neighbours=new HashMap<>();
            int counter=0;
            while(n-->0)
            {
                String ras=sc.next();
                names.put(counter,ras);
                nam.put(ras,counter);
                int p=sc.nextInt();
                StringBuilder sbr=new StringBuilder();
                sbr.append("").append(p);
                while(p-->0)
                {
                    sbr.append("").append(sc.nextInt());//index
                    sbr.append("").append(sc.nextInt());//cost
                }
                neighbours.put(counter,sbr.toString());
                counter++;
            }
            for (int i = 0; i < counter; i++) {
                vertex a=new vertex(names.get(i));
                g.addVertex(a);
                String m=neighbours.get(i);
                int p=m.charAt(0);
                int temp=1;
                while(p-- >0)
                {
                    int c=Integer.parseInt(""+m.charAt(temp++));
                    int cost=Integer.parseInt(""+m.charAt(temp++));
                    g.addEdge(g.vertexList.get(i),g.vertexList.get(c-1), cost);
                }
            }
            int r=sc.nextInt();
            while(r--> 0)
            {
                String sourc=sc.next();
                vertex source=g.vertexList.get(nam.get(sourc));
                String destinat=sc.next();
                vertex destination=g.vertexList.get(nam.get(destinat));
                g.dijikstrasAlgo(source);
                System.out.println(g.ar[nam.get(destinat)][1]);
            }
        }
    }
    
}
class graph // it is a directed and weighted graph
{
    public int [][]ar;
    public ArrayList<vertex> vertexList;
    public Map<String,Integer> edWeights; // edges will be defined as source-destination as keys and their weights as values 
    public  int numOfVertices;
    public ArrayList<LinkedList<vertex>> adjList;
    public ArrayDeque<vertex> stack;
    public graph() {
        vertexList=new ArrayList<>();
        adjList= new ArrayList<>();
        numOfVertices=0;
        stack=new ArrayDeque<>();
        edWeights=new HashMap<>();
    }
    public  void addVertex(vertex vert)
    {
       vertexList.add(vert);
       adjList.add(new LinkedList<>());
       numOfVertices++;
    }
    public void addEdge(vertex source,vertex destination,int weight)
    {
        for (int i = 0; i < vertexList.size(); i++) {
            if(vertexList.get(i)==source)
            {
                adjList.get(i).add(destination);
                edWeights.put(""+source+"-"+destination,weight);
            }
        }
    }
    /*public void dfs()
    {
        vertexList.get(0).visited=true;
        stack.push(vertexList.get(0));
        while(!stack.isEmpty())
        {
            vertex k=getAdjacent(stack.peek());
            if(k!=null)
                stack.push(k);
            else
                stack.pop();
        }
    }*/
    public vertex getAdjacent(vertex vert,int cutIndex)
    {
        int pos=0;
        for (int i = 0; i < numOfVertices; i++) {
            if(vertexList.get(i)==vert)
            {
                pos=i;
                break;
            }
        }
      LinkedList<vertex> p=adjList.get(pos);
      // no need to mark visited , as may need to visit again and again.
      if(cutIndex>=p.size())
          return null;
        for (int i = cutIndex; i < p.size(); i++) {
          // if(!p.get(i).visited)
          // {
              // p.get(i).visited=true;
               return p.get(i);
           //}
        }
        return null;
    }
    public int returnVertexIndex(vertex v)
    {
        for (int i = 0; i < vertexList.size(); i++) {
            if(vertexList.get(i)==v)
                return i;
        }
        return 0;// had to return something for the function to work properly
    }
    public  int getEdgeWeight(vertex source,vertex destination)
    {
        return edWeights.get(""+source+"-"+destination);
    }
    public void dijikstrasAlgo(vertex source)
    {
        ar=new int[vertexList.size()][2];
        for (int i = 0; i < vertexList.size(); i++) {
            ar[i][0]=Integer.MAX_VALUE;
        }
        int yp=returnVertexIndex(source);
        ar[yp][0]=0;
        ar[yp][1]=yp;
        PriorityQueue<vertex> pq=new PriorityQueue<>(new Comparator<vertex>(){
            @Override
            public int compare(vertex o1, vertex o2) {
                 int ind1=returnVertexIndex(o1);
                 int ind2=returnVertexIndex(o2);
                 if(ar[ind1][0]>ar[ind2][0])
                     return 1;
                 else
                     return 0;
            }
        });
        pq.add(source);
        while(!pq.isEmpty())
        {
            source=pq.poll();
            int cutIndex=0;
            vertex adj=getAdjacent(source,cutIndex++);
            while(adj!=null)
            {
                int ind=returnVertexIndex(adj);
                int kp=ar[ind][0];
                ar[ind][0]=((getEdgeWeight(source, adj)+ar[returnVertexIndex(source)][0]<ar[ind][0]))?(getEdgeWeight(source, adj)+ar[returnVertexIndex(source)][0]):ar[ind][0];
                if(kp!=ar[ind][0])
                    ar[ind][1]=returnVertexIndex(source);
                pq.offer(adj);
                adj=getAdjacent(source,cutIndex++);
            }
        }
        System.out.println("prinitng the final matrix");
        for (int i = 0; i < vertexList.size(); i++) {
            for (int j = 0; j < 2; j++) {
                System.out.print(ar[i][j]+", ");
            }
            System.out.println("");
        }
    }
}
class vertex
{
    public String label;
    public boolean visited;

    public vertex(String label) {
        this.label = label;
        this.visited = false;
    }
}
