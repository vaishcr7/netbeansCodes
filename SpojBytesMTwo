import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
class SpojBytesMTwo {
static class Reader {

        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader() {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public Reader(String file_name) throws IOException {
            din = new DataInputStream(new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String readLine() throws IOException {
            byte[] buf = new byte[64]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (c == '\n') {
                    break;
                }
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextInt() throws IOException {
            int ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg) {
                c = read();
            }
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (neg) {
                return -ret;
            }
            return ret;
        }

        public long nextLong() throws IOException {
            long ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg) {
                c = read();
            }
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');
            if (neg) {
                return -ret;
            }
            return ret;
        }

        public double nextDouble() throws IOException {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg) {
                c = read();
            }

            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (c == '.') {
                while ((c = read()) >= '0' && c <= '9') {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg) {
                return -ret;
            }
            return ret;
        }

        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1) {
                buffer[0] = -1;
            }
        }

        private byte read() throws IOException {
            if (bufferPointer == bytesRead) {
                fillBuffer();
            }
            return buffer[bufferPointer++];
        }

        public void close() throws IOException {
            if (din == null) {
                return;
            }
            din.close();
        }
    }
    public static void main(String[] args) {
     Reader sc=new Reader();
     try
     {
         int t=Integer.parseInt(sc.readLine());
         while(t-->0)
         {
             String s[]=(sc.readLine()).split(" ");
             int r=Integer.parseInt(s[0]);
             int c=Integer.parseInt(s[1]);
             int [][]arr=new int[r][c];
             for (int i = 0; i < r; i++) {
                 String s1[]=(sc.readLine()).split(" ");
                 for (int j = 0; j < c; j++) {
                     arr[i][j]= Integer.parseInt(s1[j]);
                 }
             }
             System.out.println("here ssddsadas");
             /////////starting dp logic
             //populating the array
             for (int i = r-2; i>=0; i--) {
                 System.out.println("here");
                 for (int j = 0; j < c; j++) {
                     if(j==0)
                     {
                         arr[i][j]+=Math.max(arr[i+1][j],arr[i+1][j+1]);
                     }
                     else if(j==c-1)
                     {
                         arr[i][j]+=Math.max(arr[i+1][j-1],arr[i+1][j]);
                     }
                     else
                     {
                         arr[i][j]+=Math.max(arr[i+1][j-1],Math.max(arr[i+1][j],arr[i+1][j+1]));
                     }
                 }
             }
             
             //making the trail to add
             int big=arr[0][0];
             System.out.println("big= "+big);
             if(!(r==1 || c==1))
             {
                 for (int j = 1; j < c; j++) {
                     if(arr[0][j]>big)
                     {
                         big=arr[0][j];
                         //pos=j;
                     }
                 }
             }
             else
             {
               System.out.println("else block");
                for(int i=1;i<r;i++)
               if(big<arr[i][0])
                               big=arr[i][0];
                for(int i=1;i<c;i++)
               if(big<arr[0][i])
                               big=arr[0][i];                      
             }
             //have the biggest element of first row or the tail of the biggest sum trail
             System.out.println(big);             
        }
     }
     catch(Exception e)
     {
         
     }
    }
    
}
