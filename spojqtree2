package spojqtreetwo;

import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.Stack;

public class SpojQtreeTwo {
static class Reader {

        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader() {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public Reader(String file_name) throws IOException {
            din = new DataInputStream(new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String readLine() throws IOException {
            byte[] buf = new byte[64]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (c == '\n') {
                    break;
                }
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextInt() throws IOException {
            int ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg) {
                c = read();
            }
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (neg) {
                return -ret;
            }
            return ret;
        }

        public long nextLong() throws IOException {
            long ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg) {
                c = read();
            }
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');
            if (neg) {
                return -ret;
            }
            return ret;
        }

        public double nextDouble() throws IOException {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg) {
                c = read();
            }

            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (c == '.') {
                while ((c = read()) >= '0' && c <= '9') {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg) {
                return -ret;
            }
            return ret;
        }

        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1) {
                buffer[0] = -1;
            }
        }

        private byte read() throws IOException {
            if (bufferPointer == bytesRead) {
                fillBuffer();
            }
            return buffer[bufferPointer++];
        }

        public void close() throws IOException {
            if (din == null) {
                return;
            }
            din.close();
        }
    }
    public static void main(String[] args) throws IOException {
       Scanner sc=new Scanner(System.in);
       int t=sc.nextInt();
       while(t-->0)
       {
           int n=sc.nextInt();
           graph g=new graph(n);
           for (int i = 1; i <=n; i++) {
               g.addVertex(new vertex(i));
           }
           for (int i = 0; i < n-1; i++) {
               int s=sc.nextInt();
               int d=sc.nextInt();
               int wt=sc.nextInt();
             //  System.out.println("s= "+s+" d= "+d+"and wt= "+wt);
               g.addEdge(g.vertexList.get(s-1),g.vertexList.get(d-1), wt);
           }
           String s=sc.next();
           while(!"DONE".equals(s))
           {              
               /*String[] st=s.split(" ");
               System.out.println("string is ");
               for (int i = 0; i < st.length; i++) {
                   System.out.print(st[i]+"  ");
               }*/
               //System.out.println("");
               /*System.out.println("adj matrix: ");
               for (int i = 0; i < g.vertexList.size(); i++) {
                   for (int j = 0; j < g.vertexList.size(); j++) {
                       System.out.print(g.ar[i][j]+" ");
                   }
                   System.out.println("");
               }*/
               g.dfsEulerTourStyle(g.vertexList.get(0));
               g.produceOccurence();
               if("DIST".equals(s))//st.length==3)
               {
                   int source=sc.nextInt();
                   int destination=sc.nextInt();
                   queryPos ap=new queryPos(source,destination);
                   System.out.println(g.returnDist(ap, n));
                   //int source=Integer.parseInt(st[1]);
                   //int destination=Integer.parseInt(st[2]);
               }
               else
               {
                   int source=sc.nextInt();
                   int destination=sc.nextInt();
                   int k=sc.nextInt();
                   queryPos ap=new queryPos(source,destination);
                   System.out.println(g.path.get(k-1));
                   //int source=Integer.parseInt(st[1]);
                   //int destination=Integer.parseInt(st[2]);
                   //int k=Integer.parseInt(st[3]);
               }
               s=sc.next();
               //System.out.println("s= "+s);
           }
       }
       
    }
    
}
class graph // it is a non-directed and weighted graph
{
    public int [][]ar;
    public ArrayList<vertex> vertexList,eulerTraversal;
    public Map<vertex,Integer> firstOccurence;
    public Map<Integer,vertex> revFirstOccurence;
    public ArrayList<Integer> path;
    //public Map<String,Integer> edWeights; // edges will be defined as source-destination as keys and their weights as values 
    public  int numOfVertices;
    //public ArrayList<LinkedList<vertex>> adjList;
    public graph(int size) {
        numOfVertices=size;
        ar=new int[numOfVertices][numOfVertices];
        for (int i = 0; i < numOfVertices; i++) {
            Arrays.fill(ar[i],Integer.MAX_VALUE);
        }
        //adjList=new ArrayList<>();
        vertexList=new ArrayList<>();
        eulerTraversal=new ArrayList<>();
        firstOccurence=new HashMap<>();
        revFirstOccurence=new HashMap<>();
        path=new ArrayList<>();
    }
    public  void addVertex(vertex vert)
    {
       vertexList.add(vert);
      // numOfVertices++;
    }
    public void addEdge(vertex source,vertex destination,int weight)
    {
       /* for (int i = 0; i < vertexList.size(); i++) {
            if(vertexList.get(i)==source)
            {
                adjList.get(i).add(destination);
                edWeights.put(""+source+"-"+destination,weight);
            }
        }*/
       ar[source.label-1][destination.label-1]=weight; 
       ar[destination.label-1][source.label-1]=weight;
    }
    public  int getEdgeWeight(vertex source,vertex destination)
    {
        //return edWeights.get(""+source+"-"+destination);
        return ar[source.label-1][destination.label-1];
    }
    public int getAdjacent(vertex v)
    {
        for (int i = 0; i < vertexList.size(); i++) {
            if(i!=v.label-1)
            {
                if(ar[v.label-1][i]!=Integer.MAX_VALUE && !vertexList.get(i).visited)
                {
                    vertexList.get(i).visited=true;
                    //System.out.println("returning "+vertexList.get(i).label+" from adjacent function");
                    return i;   
                }
            }
        }
        return -1;
    }
    public void dfsEulerTourStyle(vertex root)
    {
        Stack<vertex> st=new Stack<>();
        st.add(root);
        root.visited=true;
        int orderNum=0;
        while(!st.isEmpty())
        {
           eulerTraversal.add(st.peek());
           st.peek().level_number=(st.peek().level_number==Integer.MAX_VALUE)?orderNum++:st.peek().level_number;
           int p=getAdjacent(st.peek());
           //System.out.println("added "+st.peek().label+" with level number= "+st.peek().level_number);
           if(p!=-1)
               st.add(vertexList.get(p));
           else
               st.pop();
           //System.out.println("eulerTraversal list is ");
          // for (int i = 0; i < eulerTraversal.size(); i++) {
             //System.out.print(eulerTraversal.get(i).label+" ");
           // }
           //System.out.println("");
        }
    }
    public void produceOccurence()
    {
        for (int i = 0; i < eulerTraversal.size(); i++) {
            if(!firstOccurence.containsKey(eulerTraversal.get(i)))
                firstOccurence.put(eulerTraversal.get(i),i);
                revFirstOccurence.put(i,eulerTraversal.get(i));
        }
    }
    public queryPos returnIndexes(vertex a,vertex b)
    {
        return new queryPos(firstOccurence.get(a),firstOccurence.get(b));
    }
    public int rmqQuery(queryPos  qp,int n)
    {
        //qp=returnIndexes(vertexList.get(qp.a-1),vertexList.get(qp.b-1));
        int startOfRange=qp.a;
        int endOfRange=qp.b;
        //System.out.println("start of range= "+startOfRange+" and end of range= "+endOfRange);
       // System.out.println("");
        //for (int i = 0; i < eulerTraversal.size(); i++) {
          //  System.out.print(eulerTraversal.get(i).label+" ");
       // }
        //System.out.println("");
        int minLevel=eulerTraversal.get(startOfRange).level_number,minLevelPos=startOfRange;
        for (int i = startOfRange+1; i <=endOfRange ; i++) {
            if(eulerTraversal.get(i).level_number<minLevel)
            {
                //System.out.println("minlevel changed to "+minLevel);
                minLevel=eulerTraversal.get(i).level_number;
                minLevelPos=i;
            }
        }
        return minLevelPos;
     /*   
    int [][]lookup=new int[n][n];
    for (int i = 0; i < n; i++)
        lookup[i][0] = i;
 
    // Compute values from smaller to bigger intervals
    for (int j=1; (1<<j)<=n; j++)
    {
        System.out.println("j= "+j);
        // Compute minimum value for all intervals with size 2^j
        for (int i=0; (i+(1<<j)-1) < n; i++)
        { 
            // For vertexList.get(2][10], we compare vertexList.get(lookup[0][3]] and
            // vertexList.get(lookup[3][3]]
            System.out.println("i= "+i+" and i + (1<<(j-1))= "+i + (1<<(j-1)));
            if (vertexList.get(lookup[i][j-1]).level_number < vertexList.get(lookup[i + (1<<(j-1))][j-1]).level_number)
                lookup[i][j] = lookup[i][j-1];
            else
                lookup[i][j] = lookup[i + (1 << (j-1))][j-1];      
        }
    }
        System.out.println("lookup table is ");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(lookup[i][j]+" ");
            }
            System.out.println("");
        }
         // For [2,10], j = 3
    int j = (int)(Math.log(qp.b-qp.a+1)/Math.log(2));
 
    // For [2,10], we compare vertexList.get(lookup[0][3]] and
    // vertexList.get(lookup[3][3]], 
    if (vertexList.get(lookup[qp.a][j]).level_number <= vertexList.get(lookup[qp.b - (1<<j) + 1][j]).level_number)
        return vertexList.get(lookup[qp.a][j]);
    else 
        return vertexList.get(lookup[qp.b - (1<<j) + 1][j]);*/
    }
    public int returnDist(queryPos  qp,int n)
    {
        qp=returnIndexes(vertexList.get(qp.a-1),vertexList.get(qp.b-1));
        int vindex=rmqQuery(qp, n);
       //System.out.println("vindex= "+vindex);
        int sum=0;
        Set<vertex> visited=new HashSet<>();
        for (int i = qp.a; i <vindex;) {
           // System.out.println("qp.a= "+i);
           //sum+=ar[revFirstOccurence.get(i).label-1][revFirstOccurence.get(i+1).label-1];
            //System.out.println("appending to path "+revFirstOccurence.get(i).label);
           path.add(revFirstOccurence.get(i).label);
           i++;
        }
      //  path.append(revFirstOccurence.get(vindex).label);
        //int t=path.length()-1;
       for (int i = vindex; i <=qp.b;i++) {
          // System.out.println("qp.b= "+i);
           //sum+=ar[revFirstOccurence.get(i).label-1][revFirstOccurence.get(i-1).label-1];
           //System.out.println("appending to path "+revFirstOccurence.get(i).label);
           path.add(revFirstOccurence.get(i).label);
        }
        //System.out.println("path= "+path);
        // calculating the sum now
        Set<Integer> st=new HashSet<>();
        int []posArr=new int[n+1];
        Arrays.fill(posArr,-1);
        int j=0;
        while(j<path.size()) {
            if(!st.contains(path.get(j)))
            {
                st.add(path.get(j));
                posArr[path.get(j)]=j;
            }
            else
            {
                //System.out.print("else part");
                int fpos=posArr[path.get(j)];
                int count=(j-fpos);
                for(int i=j;i>fpos;i--){
                   // System.out.print("   count= "+count+" and j= "+j+" ,fpos= "+fpos+" ,i= "+i);
                    path.remove(i);
                }
               // System.out.println("");
                j-=(j-path.get(j));
            }
            //System.out.println("j= "+j+" and path= "+path+" ,st= "+st+" and posArr= "+Arrays.toString(posArr));
            j++;
        }
        //now the elements remaining in the path should be the only real path. add them to sum.
        
        for (int i = 0; i < path.size()-1; i++) {
            sum+=ar[path.get(i)-1][path.get(i+1)-1];
        }
       return sum;
    }
}
class queryPos
{
    public int a,b;

    public queryPos(int a, int b) {
        this.a = a;
        this.b = b;
    }
    
}
class vertex
{
    public int label;
    public int level_number;
    public boolean visited;
    public vertex(int label) {
        this.label = label;
        this.level_number=Integer.MAX_VALUE;
        this.visited=false;
    }
}
/*
1 6 1 2 1 2 4 1 2 5 2 1 3 1 3 6 2 DIST 
 4  6   
 KTH 4 6 4 
 DONE
*/
