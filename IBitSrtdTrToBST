import java.util.ArrayList;
import java.util.Stack;

public class Main {

    public static void main(String[] args) {
        // TreeNode a=new TreeNode(0);
        TreeNode b=new TreeNode(1);
        // TreeNode c=new TreeNode(2);
        TreeNode d=new TreeNode(3);
        // TreeNode e=new TreeNode(4);
        // TreeNode f=new TreeNode(5);
        // TreeNode g=new TreeNode(6);
        ArrayList<TreeNode> al=new ArrayList<>();
        // al.add(a);
        al.add(b);
        // al.add(c);
        al.add(d);
        // al.add(e);
        // al.add(f);
        // al.add(g);
        TreeNode head=mkHtBncdBST(al);
        System.out.println("\n head is "+head.val);
        System.out.println(" = "+head.left.val);
        // System.out.println(" = "+head.right.val);
        // System.out.println(" = "+head.left.left.val);
        // System.out.println(" = "+head.left.right.val);
        // System.out.println(" = "+head.right.left.val);
        // System.out.println(" = "+head.right.right.val);
    }
    public TreeNode sortedArrayToBST(final List<Integer> al) {
        if(al.isEmpty())
            return null;
        if(al.size()==1)
            return al.get(0);
        int mid=al.size()/2;
        al.get(mid).left=gps(al,0,mid-1);
        al.get(mid).right=gps(al,mid+1,al.size()-1);
        return al.get(mid);
    }
    public static TreeNode gps(ArrayList<TreeNode> al,int st,int end)
    {
        if(end<st)
            return null;
        if((end-st)==0)
            {
                // System.out.println("returning "+al.get(end).val);
                return al.get(end);
            }
        // System.out.println("initial st= "+st+" and end= "+end);
        int mid=(end-st)/2;
        TreeNode head=al.get(st+mid);
        // System.out.println("mid= "+mid+" and head= "+head.val);
        if(mid-1>=0)
            head.left=gps(al,st,st+mid-1);
        if(end>=(st+mid-1))    
            head.right=gps(al,st+mid+1,end);
        // if(head.left!=null && head.right!=null)
        //     System.out.println("head left= "+head.left.val+" and head's right= "+head.right.val);
        // else if(head.left!=null && head.right==null)
        //     System.out.println("head left= "+head.left.val+" and head's right= null");
        // else if(head.left==null && head.right!=null)
        //     System.out.println("head left= null"+" and head's right= "+head.right.val);
        // else if(head.left==null && head.right==null)
        //     System.out.println("head left= null and head's right= null");            
        return head;
    }
}
class TreeNode
{
    int val;
    TreeNode left,right;
    public TreeNode(int val) {
        this.val=val;
    }
    
}
